" early configuration for fakeclip: enable only on Wayland (Wayland clipboard is not
" supported by Vim natively)
if has_key(environ(), "WAYLAND_DISPLAY")
    let g:fakeclip_provide_clipboard_key_mappings = 1
else
    let g:fakeclip_provide_clipboard_key_mappings = 0
    let g:fakeclip_no_default_key_mappings = 1
endif

" startup Vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

    " let Vundle manage Vundle
    Plugin 'gmarik/Vundle.vim'

    " external plugins
    Plugin 'tpope/vim-sensible'
    Plugin 'tpope/vim-repeat'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-commentary'
    Plugin 'ciaranm/detectindent'
    Plugin 'godlygeek/tabular'
    Plugin 'Lokaltog/vim-easymotion'
    Plugin 'cespare/vim-toml'
    Plugin 'cespare/vim-go-templates'
    Plugin 'rust-lang/rust.vim'
    Plugin 'w0rp/ale'
    Plugin 'LnL7/vim-nix'
    " for "+ register on Wayland
    Plugin 'kana/vim-fakeclip'
    Plugin 'towolf/vim-helm'

    " override broken Markdown syntax highlighting shipping with Vim 8.2
    " ref: https://github.com/tpope/vim-markdown/issues/151
    Plugin 'tpope/vim-markdown'

call vundle#end()
filetype plugin indent on

function! Identify()
    let l_syn = synIDattr(synID(line("."),col("."),1), "name")
    let l_hi  = synIDattr(synIDtrans(synID(line("."),col("."),1)), "name")
    if l_hi != "" && l_hi != "Normal" && l_hi != l_syn
        return l_syn . " -> " . l_hi
    else
        return l_syn
    endif
endfunction
com! Identify echo Identify()

com! LowColor set t_Co=8 | colo torte

"prevent V-s from being mapped by surround plugin
" (the plugin would just display a deprecation warning anyway)
vnoremap s s

set background=dark
set nocindent smartindent
set expandtab smarttab
set formatoptions+=ro
set hlsearch incsearch
set ignorecase smartcase
set laststatus=2
set linebreak
set list listchars=trail:·,nbsp:·,tab:\ \ 
set mouse=a
set number
set shortmess+=I
set shiftwidth=2 tabstop=2 softtabstop=2
set statusline=%<%f\ %#Search#\ %Y%M%R\ %*%=\ %-14.(%l,%c%V%)\ %P
set tildeop
set ttymouse=sgr
set wildmode=longest:full wildmenu

let perl_include_pod=1

" HARD MODE
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Up> <Nop>
noremap <Down> <Nop>

" disable smartindent behavior for # symbol (see :help 'smartindent')
inoremap # X<BS>#

" binding to highlight last inserted text
nnoremap gV `[v`]
" after adjusting indentation in visual mode, restore selection for further changes
vnoremap > >gv
vnoremap < <gv
" disable a command that I usually mistype
map <F1> <Nop>
" invoke various redraws with function keys
nmap <F3> :syn sync fromstart<CR>
" quick key for forward/backward search from selection
vmap * "ty/<C-r>t<CR>
vmap # "ty?<C-r>t<CR>
" quick key for tabular plugin
vmap <bar><bar> :Tab/
vmap <bar>:     :Tab/^[^:]*:\zs/l1l0<CR>
vmap <bar>=     :Tab assignment<CR>
" quick key for easymotion plugin
map <Tab> <Plug>(easymotion-prefix)
" quick key for ALE plugin
nmap ga :ALENextWrap<CR>

" the clipboard register is annoying to type
nmap gy "+y
nmap gp "+p
nmap gP "+P
vmap gy "+y
vmap gp "+p
vmap gP "+P
map! <C-R><C-R> <C-R>+

" get rid of the fakeclip keybindings that block <C-R><C-R> from evaluating
" immediately (we do remap-then-unmap to avoid 'mapping not defined' errors)
autocmd BufEnter * call KillFakeclipKeybindings()
function! KillFakeclipKeybindings()
    map! <C-R><C-R>+ <Nop>
    unmap! <C-R><C-R>+
    map! <C-R><C-R>* <Nop>
    unmap! <C-R><C-R>*
    map! <C-R><C-R>& <Nop>
    unmap! <C-R><C-R>&
endfunction

" setup color scheme
let g:gardener_light_comments=1
colo gardener-transparent

autocmd FileType * setlocal nocindent
autocmd BufReadPost * DetectIndent

autocmd ColorScheme * call ColorSchemeFixes()
autocmd Syntax *      call ColorSchemeFixes()
function! ColorSchemeFixes()
    hi clear SpecialKey
    hi link SpecialKey LineNr
    hi ErrorMsg term=none cterm=none
endfunction

" configuration for DetectIndent
let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 2

" configuration for ALE: enable OmniComplete integration for languages that have a language server
let g:ale_completion_enabled = 1
set completeopt=menu,menuone,popup,noselect
autocmd FileType go,rust set omnifunc=ale#completion#OmniFunc

" configuration for ALE: fix on leaving insert mode
let g:ale_fixers = { 'go': [ 'goimports' ], 'rust': [ 'rustfmt' ] }
autocmd FileType go,rust autocmd InsertLeave <buffer=abuf> ALEFix

" configuration for ALE: lint on save
let g:ale_linters = {
    \ 'go': [ 'gobuild', 'govet', 'staticcheck' ],
    \ 'rust': [ 'cargo', 'analyzer' ],
    \ }
autocmd BufEnter /x/src/github.com/sapcc/*.js,/x/src/github.com/sapcc/*.jsx let b:ale_linters_ignore = { 'javascriptreact': ['eslint'] }
let g:ale_haskell_ghc_options = '-fno-code -v0 -dynamic'
let g:ale_rust_cargo_use_clippy = 1
let g:ale_rust_cargo_check_tests = 1
