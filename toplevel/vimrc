let g:loaded_AlignMapsPlugin = '1' " skip AlignMapsPlugin

call pathogen#infect()
filetype indent on
filetype plugin on

function! IdentifySyntax()
	return synIDattr(synID(line("."),col("."),1), "name")
endfunction
function! IdentifyHighlight()
	return synIDattr(synIDtrans(synID(line("."),col("."),1)), "name")
endfunction
function! Identify()
	let l_syn = IdentifySyntax()
	let l_hi  = IdentifyHighlight()
	if l_hi != "" && l_hi != "Normal" && l_hi != l_syn
		return l_syn . " -> " . l_hi
	else
		return l_syn
	endif
endfunction

com! IdentifySyntax echo IdentifySyntax()
com! IdentifyHighlight echo IdentifyHighlight()
com! Identify echo Identify()

function! LowColor()
	set t_Co=8
	colo default
endfunction
com! LowColor call LowColor()

function! SwitchSourceHeader()
	"update!
	if (expand ("%:e") == "h")
		if (filereadable(expand("%:r") . ".c"))
			find %:r.c
		else
			find %:r.cpp
		endif
	else
		find %:r.h
	endif
endfunction
nmap ,s :call SwitchSourceHeader()<CR>

"config and keybindings for BufExplorer plugin
let g:bufExplorerSortBy='name'

"prevent V-s from being mapped by surround plugin
" (the plugin would just display a deprecation warning anyway)
vnoremap s s

"filetype plugin on
set autoindent
set background=dark
set cindent
set expandtab
set fo=tcroq
set hlsearch
set incsearch
set ignorecase smartcase
set laststatus=2
set linebreak
set list listchars=trail:·,nbsp:·,tab:\ \ 
set mouse=a
set number
set shiftwidth=4
set smarttab
set statusline=%<%f\ %#Search#\ %Y%M%R\ %*\ %{fugitive#statusline()}%=\ %-14.(%l,%c%V%)\ %P
set tabstop=4
set tildeop
set wildmode=longest:full
set wildmenu
syntax enable

" remove highlighting of search matches
nmap , :let @/=""<CR>:<BS>
nmap ,, :let @/=""<CR>:<BS>
" after repeating commands, put the cursor at the start of the change
nmap . .`[
" after adjusting indentation in visual mode, restore selection for further changes
vnoremap > >gv
vnoremap < <gv
" invoke various redraws with function keys
nmap <F3> :syn sync fromstart<CR>
nmap <F4> :redraw!<CR>
" change mouse mode with function keys
nmap <F9> :set mouse=<CR>
nmap <F10> :set mouse=a<CR>
" quick key for Align plugin
vmap <bar> :Align<Space>
nmap <bar> :set opfunc=ExecAlign<CR>:<BS>g@
" quick key for forward/backward search from selection
vmap * "ty/<C-r>t<CR>
vmap # "ty?<C-r>t<CR>

function! ExecAlign(type)
	let sel_save = &selection
	let &selection = "inclusive"
	let reg_save = @@

	let seps = input('align on: ')
	silent exe "'[,']Align " . seps

	let &selection = sel_save
	let @@ = reg_save
endfunction

" setup color scheme, highlight interesting whitespace
set t_Co=256
if $TERM == "xterm-256color"
	let g:ConqueTerm_TERM = 'xterm-256color'
endif

let g:gardener_light_comments=1
colo gardener-transparent

"formatting style for Python code and changelogs in our working group
autocmd FileType python setlocal expandtab smarttab nocindent tabstop=4 softtabstop=4
autocmd FileType python map <F5> :w<CR>:!python "%"<CR>
autocmd FileType changelog setlocal expandtab smarttab tabstop=4 softtabstop=4

autocmd FileType tex map <F5> :w<CR>:wa<CR>:make<CR>
autocmd FileType tex map <F6> :!xdg-open %<.pdf &>/dev/null &disown<CR><CR>
autocmd FileType tex setlocal nocindent

" enable pair matching for angle brackets (e.g. C++ templates)
autocmd FileType cpp setlocal matchpairs+=<:>
" add :/// to comments, but make sure that it has a higher priority than ://
autocmd FileType cpp setlocal comments-=:// comments+=:///,://

"formatting style for Perl code
autocmd FileType perl call PerlCustomStuff()
autocmd Syntax perl call PerlCustomSyntax()
autocmd BufReadPost * DetectIndent

hi link perlStatement PreCondit
hi link javaScriptStringS PreProc
hi link javaScriptStringD PreProc

function! PerlCustomStuff()
	setlocal expandtab smarttab tabstop=4 softtabstop=4 shiftwidth=3 iskeyword-=:
	nmap <buffer> gd "tyiw/\%(^sub \\|^\s*function \)\zs<C-r>t\><CR>:let @/=""<CR>:<BS>
	syntax sync fromstart
endfunction
function! PerlCustomSyntax()
	syn keyword perlStatementList uniq natatime
	syn region perlStatementIndirObjWrap matchgroup=perlStatementIndirObj start="\<\%(\%(continue\|uireturn\|return\|bless\|else\|eval\|sub\|die\|q[qrw]\|\w\)\>\)\@![a-z_]\+\>\s*{" end="}" contains=@perlTop,perlGenericBlock
	syn match perlStatementException "\<\%(die\|croak\|carp\|confess\|cluck\|ui\%(die\|return\)\)\>"
	syn keyword perlNew new create
	syn keyword perlSubNameNew new create containedin=perlSubName
	hi link perlNew perlOperator
	hi link perlSubNameNew perlNew
	hi link perlStatementException ErrorMsg
endfunction

autocmd ColorScheme * call ColorSchemeFixes()
autocmd Syntax *      call ColorSchemeFixes()

function! ColorSchemeFixes()
	hi clear SpecialKey
	hi link SpecialKey LineNr
	hi ErrorMsg term=none cterm=none
endfunction

" configuration for Syntastic
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1
let g:syntastic_javascript_checkers = ['jsl']
let g:syntastic_javascript_jsl_args = '-conf /home/stefan/.vim/jsl.conf'
let g:syntastic_perl_checkers = [ 'perl', 'perlcritic' ]
let g:syntastic_perl_lib_path = [ "/home/stefan/GMT/cgi-bin/lib", "/home/stefan/GMT/cgi-bin" ]
let g:syntastic_enable_perl_checker = 1
